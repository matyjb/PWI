Array.from||(Array.from=function(){var toStr=Object.prototype.toString,isCallable=function(fn){return"function"==typeof fn||"[object Function]"===toStr.call(fn)},toInteger=function(value){var number=Number(value);return isNaN(number)?0:0!==number&&isFinite(number)?(number>0?1:-1)*Math.floor(Math.abs(number)):number},maxSafeInteger=Math.pow(2,53)-1,toLength=function(value){var len=toInteger(value);return Math.min(Math.max(len,0),maxSafeInteger)};return function from(arrayLike){var C=this,items=Object(arrayLike);if(null==arrayLike)throw new TypeError("Array.from requires an array-like object - not null or undefined");var mapFn=arguments.length>1?arguments[1]:void 0,T;if(void 0!==mapFn){if(!isCallable(mapFn))throw new TypeError("Array.from: when provided, the second argument must be a function");arguments.length>2&&(T=arguments[2])}for(var len=toLength(items.length),A=isCallable(C)?Object(new C(len)):new Array(len),k=0,kValue;k<len;)kValue=items[k],A[k]=mapFn?void 0===T?mapFn(kValue,k):mapFn.call(T,kValue,k):kValue,k+=1;return A.length=len,A}}());